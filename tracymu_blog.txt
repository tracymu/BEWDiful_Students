At the beginning of each lesson

1. Check Git Status, and make sure everything is cleared up and tidy
2. $ git fetch teacher
3. $ git merge teacher/master (this will open up a sublime text for the message, so save that and close)
(Also, note that merge and fetch together is the same as a pull)

If you ever get stuck in Vim, you can type in this :wq!


Then to submit homework:
git add
git commit
git push origin master (origin master optional)
in Git go to Bewdiful students in MY repository
see the latest commit I did
Then pull request


If you do a merge, and if you get a conflict - then you are halfway through a merge. Then when you add/commit to get rid of the conflicts, then that last commit is a merge/commit, so you don't need to do any more merge ever again.




BEWD Week 1
30 June 2013

I actually missed the first week of the BEWD course due to being overseas. This was disappointing to me because I would appreciate the help with understanding Git and GitHub! I am more confident in my (beginners) understanding of using the terminal (command line) and basic Ruby.

I have undertaken all the tutorials and readings that our tutor Ben has recommended - as well as some extra to be able to complete this homework. Let's see if this actually gets pushed up to GitHub...

BEWD Week 2 
1 July
Lesson 3

This class we covered collections (arrays and hashes) and loops.


puts always returns nil - e..g. if i\ the last thing in a method was a puts, then the method would return nil. 



  

Lesson 4

APIs from Digg, Reddit and Hash.

JSON - extracting from those APIs and

Symbol - there can only be one of each e.g. :ben and :ben are the same
they are immutable strings.
whenever you repeat it is the same object in memory




x | | = "a"

This sets x to a, only if it is nil or false. 




Passing hashes to methods

def greet(name, options={})
  options[:greeting] | | = "Hi"
  puts "#{options[:greeting]} #{name}!!!"
end



JSON
Javascript object notation



Ruby Gems
distributable ruby programs

a gem is a ruby package

write this in your file

"source "https://rubygems.org"

gem "httpi""

then bundle install

and it means you can have that httpi gem.



gemfile.lock will be installed, and it means that later when you deploy it, it knows not to use any newer versions of those gems you installed, because you don't know if it works with those newer version gems




$ bundle exec ruby filename.rb

this command says run ruby and loads the right version of the required gems into your ruby path.

and then whenever you want to run that file, instead of doing $ruby filename, you do $bundle exec ruby filename, to make sure you have the right versions of those gems 


http://www.reddit.com/.json
http://mashable.com/stories.json
http://digg.com/api/news/popular.json
http://jsonviewer.stack.hu



 BEWD WEek 3
 Lesson 5



attr_accessor :name 
sets up getting and setting methods
def name= (val)
  @name = val
end

def name
  @name
end


To add the current folder to the load path
In IRB write
$LOAD_PATH.unshift(File.dirname(__FILE__))

so that in IRB you can require any files that are in your current folder.
We learnt that Load_PATH thing because it is recommended not to save too many classes in one file. I.e. so, if you have a class called car, then you would expect that to be in a file called car.rb  Not as part of a big huge file of millions or cars.






VARIABLES AND THINGS

Constants - written all CAPS - can't do Car.WHEELS, you need to do Car::WHEELS
Local variable  - name - can only be used inside their methods
Instance variable -  @name  - can be used in any instance method in that class
Class variable - @@name  - something, that if you change it, it will be changed for every instance of that class. So, if you wanted to increment something each time an instance of that class was made, an instance variable wouldn't work, because it would increment once for each one, but that's it. Whereas a class variable would be able to increment for every time.

See the example on lines 85 of coa_instr_scope.
Global $name - available everywhere. Bad for security. 




Class methods and Instance methods 
Instance method can't be called on a class, and Class methods can't be called on an instance.

class Class_name
  def Class_name.method_name
  this is a Class method
end

def method_name
  this is an instance method
end


end

MIDTERM

what is omdapi.com

how can we modify the teddit thing to 
a) take user input
b) be object oriented

needs to be able to run ruby midterm.rb
but it should include requires from other files
e.g. require 'get_input' 
require 'reddit-api'

Classes with single-responsibilities of things they are taking care of. 
e.g. class that prompts the user
class that deals with the API
class that deals with displaying the answer.

Midterm requirements
takes user input and handles bad input. e.g. you expect numbers, it gives you letters
 connects to api, and call varies based on user iput
must be object oriented
 
The first line in ruby midterm.rb
should be $LOAD.PATH.unshift)File.dirname(__FILE__))

Homework: 05 - exerciese - secret_number.rb

So - first thing of the nouns that are involved (These are the classes)
Then think of the things they need to be able to do (these will be the methods)
Break all these behaviours up really small.
Make sure you break up the activities to the appropriate Class
Note that no code should be in the class at all, they need to be in the methods
when they interact with each other  - 
see he has started

Me to write an EXPLANTION of attr_accessors so I don't forget!
Ok, so the attr_accessors have made a getter and setter

So this allows you to set a player name.
def player_name=(val)
    @player_name = val
  end

this allows you to get a player name
  def player_name
    @player_name
  end


you can replace that with 

 attr_accessor :player_name

 And basically waht this means is that you can use this player_name variable anywhere outside your class. You can use it anywhere by calling Class.player_name




Lesson 6 - Sharing Behaviour
A class is a blueprint for an object


if you have a method in an inheriting class, you can use 'super' in it's methods, and it will return whatever the 'super' version of that method did. (the method has to have the same name)

class Employee
  attr_accessor :first_name, :last_name

  def initialize(first_name, last_name)
    @first_name = first_name
    @last_name = last_name

  end

  def full_name
    "#{first_name} #{last_name}"

  end

end


class Manager < Employee

    attr_accessor :title, :first_name, :last_name

  def initialize(title, first_name, last_name)
    @title = title
    super(first_name, last_name)
  end

  def full_name
    "#{super} (#{title})"

  end

end 



 If defined in different physical files, the child would need to require the parent file (class. Remember that in Ruby, different classes should be in different files.) (And remember if you are requiring files you made, then you need to do that $LOAD_PATH thing)

YOU CAN ONLY INHERIT FROM ONE CLASS - you can have only one parent, although you can have grandparets, great grandparent, etc. 

Mixins
Modules that you 'include' in a class to share behaviours between classes

So Enumerable is a module 

Kerems example of what a mixin is. 

Two classes - bird and plane.
They share behaviours, but one can't really inherit from the other, becasue they are so different.

So, instead, you can have a module called 'flyable', which you would include in their class, and which will allow them to fly.

This module would be used as a mixin - in both bird and plane.

Modules are different from classes in that they will never be an object themselves - that is, never be instantiated. 


Include vs Require:

Require makes it available, loads it into the current file.
But you can't use the methods in it until you include it.

Namespace
You can define a class inside a module - so that you can give it a namespace. 

BaseballUtensils::Bat.new
is different to 
Animals::Bat.new


Git Undoing things

In Repo
git reset --soft

In staged area
git reset HEAD

In working area
git checkout


Final Project App Ideas

1. The recipe searcher - adding recipes based on money saving and filterable

2. The work tracker - tracking hours plus tracking purchases

3. Shopping adder - collecting links to pages of things you are interested in buying?  Like a pinterest for things that you want to buy.



When making an object oriented programme in ruby:

 - use attr accessor - so that variables in your methods and classes are gettable and settable outside of the class

 - whenever you use a variable between classes - you need to use @

 - if you want to access it between classes you need to do ClassName.variablename. Same for ClassName.method

  - if you want to use a Class and it's variables or methods, you first have to instantiate that class like ClassName.new



chekc out my midterm for what about initializing - because I never really got that. 


Lesson 07 - My first Rails APP

# Rails generator that creates all the structure for a new app
Step 1 - $ rails new hello_world

#go into that folder  and start up the server

Step 2 - $ rails server


# to get out of th server go control c

But you can actually just keep that window open,and opena  new terminal.


Rails development server listens on port 3000


wtf is tcpip?

rails server - starts up a server for this rails app that is listening o n port 3000, and it is waiting for requests on port 3000.


be in that app folder whenever you are issuing rails any commands to do anything.


There is a README.txt - and as you go along you should make chagnes to that, so people know how to get the app up and running.

/app folder is where you put all your templates, controllers,e tc

/bin folder has bundle, rails and rake commands

/config folder - e.g. constant 

/lib folder - 


/public folder - usually everything is an interactive page, so this just usually ends up being error pages only

/temp folder - cache files, etc. Rails puts thins in there, not me

/vendor folder - any code that is provided by another vendor. You really should't customise anything you put in there, because if you did, someone might come replace it with newer versiosn. 


ROUTES: 

match'/' => 'welcome#index' means  - ------who knows I got lost here .......
mapping the / page to the Welcome controller, and the index action in there. Which is actually a method called 'index'. Which you can write whatever you like. 





HTTP Verbs
GET
PUT
POST
DELETE





Any instance method you use in your controller can be used in the associated view template. 

The variable params - takes the parameters from a URL and makes it into a hash.


Everything in the routes file, is going to call a http verb (get/put/etc.) which maps a url to a file

and that is in the form of a hash

so get '/' => 'welcome#index'


$rails generate scaffold book title:string desc:text author:string
It's going to create a book model

rake db:migrate - runs the migration - don't know what htis means


So if you pass soemthing into a new instance of a new class e.g. site_feed = SiteFeed.new(reader)
That has to have an initialise method in that classe (i.e. SietFeed class has to have an initialise method for Reader)



 def initialize(reader)
    @reader = reader
  end


  Lesson 8

See my paper about doing a spec for this game thing


  Fat Models
  Skinny Controllers - they shoudlnt' have a lot of stuff in them.

step 1. rails new appname
step 2. Set up the home route
instead of needing to do 
get '/' => 'welcome#index'

you can do 
root 'welcome#index'

Then you need to make the welcome controller
then you need to make a view for that (in a welcome folder)
    

  Rails Linkto helper  


  <%= link_to "Anchor text", 'URL' %>

or if you do this :as at the end
  get '/magic-eight-ball' => 'magic_eight_ball#index', :as => :magic_eight_ball

the you can do <%= link_to "Magic 8 Ball", magic_eight_ball_path %>

because if you set :as, then it lets you use the Rails helper method which will be 'name_path' or 'name_url'

Controller names MUST USE underscores and not hyphens



When you make a new controller - it should inherit from ApplicationController - even if through a subclass



If in the routes folder you put a symbol in the URL like this
get '/magic-eight-ball/:question' => 'magic_eight_ball#ask'

then whenever something is on the end of that url (magic eight ball url), then whatever is on the end goes into the params hash. And you can access it like this


open a rails console by typing rails c
It's like IRB but it is opening up your whole rails application 

@question = params[:question]

so if you went to magic-eight-ball/wtf-is-this

and the params hash would look like this

params = {
  :question => "wtf-is-this"
}

Because routes match on the beginning of a URL  - you should order your routes from most specific to least specific.

see the guess-again loop that happened in secret number game. 